#!/bin/bash
#
#FILE NAME : graph-temp.sh
#
#DESCRIPTION
###########
#Realise un graphique avec les temperatures du CPU et du system et du load de la machine afin de voir la correlation
#
#VARIABLES
##########
DATE=$(date +%Y%m%d)
NUM_DATA_EXTRACT="10"
DELAY="60"
DIR_PATH="$HOME/temp_graph/"
BRUT_FILE="raw_temp_graph-$DATE"
PNG_FILE="temp_graph-$DATE.png"
CPU_TEMP=0
OTHER_TEMP=0
LOAD_TIME=0
COUNTER=0
TIME_STAMP=0
#
#MAIN
##########
#
#recupere les informations et les store dans un fichier $DIR_PATH$BRUT_FILE
f_get-systeminfo() {
        CPU_TEMP=$(sensors | awk -F'[+"Â°"]' '/^CPU/{print $2}')
        OTHER_TEMP=$(sensors | grep -m 1 -e '^Other'  | awk -F'[+"."]' '{print $2}')
        LOAD_TIME=$(cat /proc/loadavg | awk '{print $1 * 100}' | bc)
        echo $TIME_STAMP $CPU_TEMP $OTHER_TEMP $LOAD_TIME >> $DIR_PATH$BRUT_FILE
	((TIME_STAMP=$TIME_STAMP + $DELAY))
} #end f_get-systeminfo
#
#saves the graph in .png file and exits the script
f_display-graph() {
	gnuplot -persist <<-EOF
	reset
	set terminal png
	set title "CPU temp, Other temp, Load average"
	set xlabel "Time search secs"
	set ylabel "Y"
	set yrange [0:300]
	set grid
	set style data lines
	set output "$DIR_PATH$PNG_FILE"
	plot "$DIR_PATH$BRUT_FILE" u 1:2 w l title 'CPU temp', \
	"$DIR_PATH$BRUT_FILE" u 1:3 w l title 'Other temp', \
	"$DIR_PATH$BRUT_FILE" u 1:4 w l title 'Load (*100)'
	EOF
	#nettoyage du fichier $BRUT_FILE
	rm $DIR_PATH$BRUT_FILE
	exit 0
} #end f_display-graph
#
while getopts "c:i:d:b:o:h" opt; do
 case $opt in
        c) NUM_DATA_EXTRACT="$OPTARG"
        ;;
        i) DELAY="$OPTARG"
        ;;
        d) DIR_PATH="$OPTARG""/"
        ;;
        b) BRUT_FILE="$OPTARG"
        ;;
        o) PNG_FILE="$OPTARG"
        ;;
        h) printf "Options:\n\t-c num : Number of data extraction. (DEFAULT : 10)\n\t\tUse 0 for unlimited\n\t-i num : The delay between updates in seconds. (DEFAULT : 60 sec)\n\t-d dir_path : Directory used to store temporary file and png graph (DEFAULT : \$HOME/temp_graph)\n\t-b brut_file : Filename to store information (DEFAULT : raw_temp_graph-\$DATE\n\t-o png_file : Filename generated by GNUPlot (DEFAULT : temp_graph-\$DATE.png)\n\t-h : Show this message\n" 
	exit 0
        ;;
        \?) echo "INVALID OPTION: $OPTARG" &>2
        exit 1
        ;;
        :) echo "OPTION -$OPTARG requires an argument" &>2
	exit 1
        ;;
 esac
done
#
#if directory does not exist, create it
if ! [ -d $DIR_PATH ]; then
	mkdir -p $DIR_PATH
fi
#
#delete existing raw_ file if exists
if [ -e $DIR_PATH$BRUT_FILE ]; then
	rm $DIR_PATH$BRUT_FILE
fi
#
#loops for number=$NUM_DATA_EXTRACT, or infinite if $NUMBER_DATA_EXTRACT is 0
while [ $NUM_DATA_EXTRACT == 0 ] || [ $COUNTER -lt $NUM_DATA_EXTRACT ]; do
	f_get-systeminfo
	((COUNTER+="1"))
	sleep $DELAY
	trap f_display-graph SIGINT
	trap f_display-graph INT
done
#
f_display-graph
#
#
